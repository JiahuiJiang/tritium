buildscript {
    repositories {
        maven {
            url 'https://artifactory.palantir.build/artifactory/all-jar'
        }
    }

    dependencies {
        classpath "com.palantir:gradle-baseline-java:${baselineVersion}"
        classpath "com.palantir:jacoco-coverage:${jacocoCoverageVersion}"
        classpath "com.palantir.exartisi:gradle-exartisi-plugin:${exartisiVersion}"
        classpath "com.palantir.gradle.gitversion:gradle-git-version:${gitVersionVersion}"
        classpath "com.palantir.internalpublish:gradle-internal-publish-plugin:${internalPublishVersion}"
        classpath "gradle.plugin.com.palantir.configurationresolver:gradle-configuration-resolver-plugin:${configurationResolverVersion}"
        classpath "gradle.plugin.org.inferred:gradle-processors:${processorsVersion}"
        classpath 'com.netflix.nebula:gradle-dependency-lock-plugin:4.2.0'
        classpath 'com.netflix.nebula:nebula-dependency-recommender:3.1.0'
    }
}

apply plugin: 'com.palantir.baseline-config'
apply plugin: 'com.palantir.baseline-idea'
apply plugin: 'com.palantir.git-version'

allprojects {
    group 'com.palantir.tritium'
    version gitVersion()

    apply from: "${rootDir}/gradle/java.gradle"
    apply plugin: 'com.palantir.exartisi'
    apply plugin: 'nebula.dependency-lock'
    apply plugin: 'nebula.dependency-recommender'

    dependencyLock {
        includeTransitives = true
        lockFile = 'versions.lock'
        configurationNames = ['runtime', 'compileClasspath']
    }

    task verifyDependencyLocksAreCurrent << {
        def expectedDependencies = tasks.saveLock.getOutputLock()
        def actualDependencies = tasks.saveLock.getGeneratedLock()
        def digester = java.security.MessageDigest.getInstance('SHA')
        logger.info("Verifying integrity of dependency locks: {} vs {}", expectedDependencies, actualDependencies)
        if (digester.digest(expectedDependencies.bytes) != digester.digest(actualDependencies.bytes)) {
            throw new GradleException("The dependencies of project " + project.name + " do not match the expected "
                + "dependencies recorded in " + expectedDependencies + ". "
                + "Run `./gradlew generateLock saveLock` and commit the updated version.lock files")
        }
    }

    dependencyRecommendations {
        propertiesFile file: project.rootProject.file('versions.props')
    }

    configurations {
        testArtifacts.extendsFrom testCompile
    }

    repositories {
        maven {
            url 'https://artifactory.palantir.build/artifactory/all-jar'
        }
    }
}
